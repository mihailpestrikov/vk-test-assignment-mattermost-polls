// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\MihailPestrikov\GolandProjects\vk-test-assignment-mattermost-polls\internal/service/poll_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	model "vk-test-assignment-mattermost-polls/internal/model"
	service "vk-test-assignment-mattermost-polls/internal/service"

	gomock "github.com/golang/mock/gomock"
)

// MockIPollService is a mock of IPollService interface.
type MockIPollService struct {
	ctrl     *gomock.Controller
	recorder *MockIPollServiceMockRecorder
}

// MockIPollServiceMockRecorder is the mock recorder for MockIPollService.
type MockIPollServiceMockRecorder struct {
	mock *MockIPollService
}

// NewMockIPollService creates a new mock instance.
func NewMockIPollService(ctrl *gomock.Controller) *MockIPollService {
	mock := &MockIPollService{ctrl: ctrl}
	mock.recorder = &MockIPollServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPollService) EXPECT() *MockIPollServiceMockRecorder {
	return m.recorder
}

// CreatePoll mocks base method.
func (m *MockIPollService) CreatePoll(question string, options []string, createdBy, channelID string, duration int) (*model.Poll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePoll", question, options, createdBy, channelID, duration)
	ret0, _ := ret[0].(*model.Poll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePoll indicates an expected call of CreatePoll.
func (mr *MockIPollServiceMockRecorder) CreatePoll(question, options, createdBy, channelID, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePoll", reflect.TypeOf((*MockIPollService)(nil).CreatePoll), question, options, createdBy, channelID, duration)
}

// DeletePoll mocks base method.
func (m *MockIPollService) DeletePoll(pollID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePoll", pollID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePoll indicates an expected call of DeletePoll.
func (mr *MockIPollServiceMockRecorder) DeletePoll(pollID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePoll", reflect.TypeOf((*MockIPollService)(nil).DeletePoll), pollID, userID)
}

// EndPoll mocks base method.
func (m *MockIPollService) EndPoll(pollID, userID string) (*service.VoteResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndPoll", pollID, userID)
	ret0, _ := ret[0].(*service.VoteResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndPoll indicates an expected call of EndPoll.
func (mr *MockIPollServiceMockRecorder) EndPoll(pollID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndPoll", reflect.TypeOf((*MockIPollService)(nil).EndPoll), pollID, userID)
}

// GetPoll mocks base method.
func (m *MockIPollService) GetPoll(id string) (*model.Poll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoll", id)
	ret0, _ := ret[0].(*model.Poll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoll indicates an expected call of GetPoll.
func (mr *MockIPollServiceMockRecorder) GetPoll(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoll", reflect.TypeOf((*MockIPollService)(nil).GetPoll), id)
}

// GetResults mocks base method.
func (m *MockIPollService) GetResults(pollID string) (*service.VoteResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResults", pollID)
	ret0, _ := ret[0].(*service.VoteResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResults indicates an expected call of GetResults.
func (mr *MockIPollServiceMockRecorder) GetResults(pollID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResults", reflect.TypeOf((*MockIPollService)(nil).GetResults), pollID)
}

// Vote mocks base method.
func (m *MockIPollService) Vote(pollID, userID string, optionIdx int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vote", pollID, userID, optionIdx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Vote indicates an expected call of Vote.
func (mr *MockIPollServiceMockRecorder) Vote(pollID, userID, optionIdx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vote", reflect.TypeOf((*MockIPollService)(nil).Vote), pollID, userID, optionIdx)
}
