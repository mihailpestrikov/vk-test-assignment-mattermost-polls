// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\MihailPestrikov\GolandProjects\vk-test-assignment-mattermost-polls\internal/service/repository.go

// Package mock_service.go is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	time "time"
	model "vk-test-assignment-mattermost-polls/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockPollReader is a mock of PollReader interface.
type MockPollReader struct {
	ctrl     *gomock.Controller
	recorder *MockPollReaderMockRecorder
}

// MockPollReaderMockRecorder is the mock recorder for MockPollReader.
type MockPollReaderMockRecorder struct {
	mock *MockPollReader
}

// NewMockPollReader creates a new mock instance.
func NewMockPollReader(ctrl *gomock.Controller) *MockPollReader {
	mock := &MockPollReader{ctrl: ctrl}
	mock.recorder = &MockPollReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPollReader) EXPECT() *MockPollReaderMockRecorder {
	return m.recorder
}

// GetExpiredActivePolls mocks base method.
func (m *MockPollReader) GetExpiredActivePolls() ([]*model.Poll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiredActivePolls")
	ret0, _ := ret[0].([]*model.Poll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpiredActivePolls indicates an expected call of GetExpiredActivePolls.
func (mr *MockPollReaderMockRecorder) GetExpiredActivePolls() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiredActivePolls", reflect.TypeOf((*MockPollReader)(nil).GetExpiredActivePolls))
}

// GetPoll mocks base method.
func (m *MockPollReader) GetPoll(id string) (*model.Poll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoll", id)
	ret0, _ := ret[0].(*model.Poll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoll indicates an expected call of GetPoll.
func (mr *MockPollReaderMockRecorder) GetPoll(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoll", reflect.TypeOf((*MockPollReader)(nil).GetPoll), id)
}

// GetPollsByChannel mocks base method.
func (m *MockPollReader) GetPollsByChannel(channelID string) ([]*model.Poll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPollsByChannel", channelID)
	ret0, _ := ret[0].([]*model.Poll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPollsByChannel indicates an expected call of GetPollsByChannel.
func (mr *MockPollReaderMockRecorder) GetPollsByChannel(channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPollsByChannel", reflect.TypeOf((*MockPollReader)(nil).GetPollsByChannel), channelID)
}

// GetPollsByCreator mocks base method.
func (m *MockPollReader) GetPollsByCreator(userID string) ([]*model.Poll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPollsByCreator", userID)
	ret0, _ := ret[0].([]*model.Poll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPollsByCreator indicates an expected call of GetPollsByCreator.
func (mr *MockPollReaderMockRecorder) GetPollsByCreator(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPollsByCreator", reflect.TypeOf((*MockPollReader)(nil).GetPollsByCreator), userID)
}

// MockPollWriter is a mock of PollWriter interface.
type MockPollWriter struct {
	ctrl     *gomock.Controller
	recorder *MockPollWriterMockRecorder
}

// MockPollWriterMockRecorder is the mock recorder for MockPollWriter.
type MockPollWriterMockRecorder struct {
	mock *MockPollWriter
}

// NewMockPollWriter creates a new mock instance.
func NewMockPollWriter(ctrl *gomock.Controller) *MockPollWriter {
	mock := &MockPollWriter{ctrl: ctrl}
	mock.recorder = &MockPollWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPollWriter) EXPECT() *MockPollWriterMockRecorder {
	return m.recorder
}

// CreatePoll mocks base method.
func (m *MockPollWriter) CreatePoll(poll *model.Poll) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePoll", poll)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePoll indicates an expected call of CreatePoll.
func (mr *MockPollWriterMockRecorder) CreatePoll(poll interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePoll", reflect.TypeOf((*MockPollWriter)(nil).CreatePoll), poll)
}

// DeletePoll mocks base method.
func (m *MockPollWriter) DeletePoll(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePoll", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePoll indicates an expected call of DeletePoll.
func (mr *MockPollWriterMockRecorder) DeletePoll(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePoll", reflect.TypeOf((*MockPollWriter)(nil).DeletePoll), id)
}

// PurgeDeletedPolls mocks base method.
func (m *MockPollWriter) PurgeDeletedPolls(olderThan time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeDeletedPolls", olderThan)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgeDeletedPolls indicates an expected call of PurgeDeletedPolls.
func (mr *MockPollWriterMockRecorder) PurgeDeletedPolls(olderThan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeDeletedPolls", reflect.TypeOf((*MockPollWriter)(nil).PurgeDeletedPolls), olderThan)
}

// UpdatePollStatus mocks base method.
func (m *MockPollWriter) UpdatePollStatus(id string, status model.PollStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePollStatus", id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePollStatus indicates an expected call of UpdatePollStatus.
func (mr *MockPollWriterMockRecorder) UpdatePollStatus(id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePollStatus", reflect.TypeOf((*MockPollWriter)(nil).UpdatePollStatus), id, status)
}

// MockVoteReader is a mock of VoteReader interface.
type MockVoteReader struct {
	ctrl     *gomock.Controller
	recorder *MockVoteReaderMockRecorder
}

// MockVoteReaderMockRecorder is the mock recorder for MockVoteReader.
type MockVoteReaderMockRecorder struct {
	mock *MockVoteReader
}

// NewMockVoteReader creates a new mock instance.
func NewMockVoteReader(ctrl *gomock.Controller) *MockVoteReader {
	mock := &MockVoteReader{ctrl: ctrl}
	mock.recorder = &MockVoteReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVoteReader) EXPECT() *MockVoteReaderMockRecorder {
	return m.recorder
}

// GetVote mocks base method.
func (m *MockVoteReader) GetVote(pollID, userID string) (*model.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVote", pollID, userID)
	ret0, _ := ret[0].(*model.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVote indicates an expected call of GetVote.
func (mr *MockVoteReaderMockRecorder) GetVote(pollID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVote", reflect.TypeOf((*MockVoteReader)(nil).GetVote), pollID, userID)
}

// GetVotesByPollID mocks base method.
func (m *MockVoteReader) GetVotesByPollID(pollID string) ([]*model.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVotesByPollID", pollID)
	ret0, _ := ret[0].([]*model.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVotesByPollID indicates an expected call of GetVotesByPollID.
func (mr *MockVoteReaderMockRecorder) GetVotesByPollID(pollID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotesByPollID", reflect.TypeOf((*MockVoteReader)(nil).GetVotesByPollID), pollID)
}

// MockVoteWriter is a mock of VoteWriter interface.
type MockVoteWriter struct {
	ctrl     *gomock.Controller
	recorder *MockVoteWriterMockRecorder
}

// MockVoteWriterMockRecorder is the mock recorder for MockVoteWriter.
type MockVoteWriterMockRecorder struct {
	mock *MockVoteWriter
}

// NewMockVoteWriter creates a new mock instance.
func NewMockVoteWriter(ctrl *gomock.Controller) *MockVoteWriter {
	mock := &MockVoteWriter{ctrl: ctrl}
	mock.recorder = &MockVoteWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVoteWriter) EXPECT() *MockVoteWriterMockRecorder {
	return m.recorder
}

// AddVote mocks base method.
func (m *MockVoteWriter) AddVote(vote *model.Vote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVote", vote)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVote indicates an expected call of AddVote.
func (mr *MockVoteWriterMockRecorder) AddVote(vote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVote", reflect.TypeOf((*MockVoteWriter)(nil).AddVote), vote)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddVote mocks base method.
func (m *MockRepository) AddVote(vote *model.Vote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVote", vote)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVote indicates an expected call of AddVote.
func (mr *MockRepositoryMockRecorder) AddVote(vote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVote", reflect.TypeOf((*MockRepository)(nil).AddVote), vote)
}

// Close mocks base method.
func (m *MockRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close))
}

// CreatePoll mocks base method.
func (m *MockRepository) CreatePoll(poll *model.Poll) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePoll", poll)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePoll indicates an expected call of CreatePoll.
func (mr *MockRepositoryMockRecorder) CreatePoll(poll interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePoll", reflect.TypeOf((*MockRepository)(nil).CreatePoll), poll)
}

// DeletePoll mocks base method.
func (m *MockRepository) DeletePoll(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePoll", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePoll indicates an expected call of DeletePoll.
func (mr *MockRepositoryMockRecorder) DeletePoll(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePoll", reflect.TypeOf((*MockRepository)(nil).DeletePoll), id)
}

// GetExpiredActivePolls mocks base method.
func (m *MockRepository) GetExpiredActivePolls() ([]*model.Poll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiredActivePolls")
	ret0, _ := ret[0].([]*model.Poll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpiredActivePolls indicates an expected call of GetExpiredActivePolls.
func (mr *MockRepositoryMockRecorder) GetExpiredActivePolls() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiredActivePolls", reflect.TypeOf((*MockRepository)(nil).GetExpiredActivePolls))
}

// GetPoll mocks base method.
func (m *MockRepository) GetPoll(id string) (*model.Poll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoll", id)
	ret0, _ := ret[0].(*model.Poll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoll indicates an expected call of GetPoll.
func (mr *MockRepositoryMockRecorder) GetPoll(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoll", reflect.TypeOf((*MockRepository)(nil).GetPoll), id)
}

// GetPollsByChannel mocks base method.
func (m *MockRepository) GetPollsByChannel(channelID string) ([]*model.Poll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPollsByChannel", channelID)
	ret0, _ := ret[0].([]*model.Poll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPollsByChannel indicates an expected call of GetPollsByChannel.
func (mr *MockRepositoryMockRecorder) GetPollsByChannel(channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPollsByChannel", reflect.TypeOf((*MockRepository)(nil).GetPollsByChannel), channelID)
}

// GetPollsByCreator mocks base method.
func (m *MockRepository) GetPollsByCreator(userID string) ([]*model.Poll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPollsByCreator", userID)
	ret0, _ := ret[0].([]*model.Poll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPollsByCreator indicates an expected call of GetPollsByCreator.
func (mr *MockRepositoryMockRecorder) GetPollsByCreator(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPollsByCreator", reflect.TypeOf((*MockRepository)(nil).GetPollsByCreator), userID)
}

// GetVote mocks base method.
func (m *MockRepository) GetVote(pollID, userID string) (*model.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVote", pollID, userID)
	ret0, _ := ret[0].(*model.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVote indicates an expected call of GetVote.
func (mr *MockRepositoryMockRecorder) GetVote(pollID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVote", reflect.TypeOf((*MockRepository)(nil).GetVote), pollID, userID)
}

// GetVotesByPollID mocks base method.
func (m *MockRepository) GetVotesByPollID(pollID string) ([]*model.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVotesByPollID", pollID)
	ret0, _ := ret[0].([]*model.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVotesByPollID indicates an expected call of GetVotesByPollID.
func (mr *MockRepositoryMockRecorder) GetVotesByPollID(pollID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotesByPollID", reflect.TypeOf((*MockRepository)(nil).GetVotesByPollID), pollID)
}

// PurgeDeletedPolls mocks base method.
func (m *MockRepository) PurgeDeletedPolls(olderThan time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeDeletedPolls", olderThan)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgeDeletedPolls indicates an expected call of PurgeDeletedPolls.
func (mr *MockRepositoryMockRecorder) PurgeDeletedPolls(olderThan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeDeletedPolls", reflect.TypeOf((*MockRepository)(nil).PurgeDeletedPolls), olderThan)
}

// UpdatePollStatus mocks base method.
func (m *MockRepository) UpdatePollStatus(id string, status model.PollStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePollStatus", id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePollStatus indicates an expected call of UpdatePollStatus.
func (mr *MockRepositoryMockRecorder) UpdatePollStatus(id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePollStatus", reflect.TypeOf((*MockRepository)(nil).UpdatePollStatus), id, status)
}
